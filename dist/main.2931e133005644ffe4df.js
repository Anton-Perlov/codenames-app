!function(e){function n(n){for(var t,l,s=n[0],i=n[1],c=n[2],p=0,m=[];p<s.length;p++)l=s[p],Object.prototype.hasOwnProperty.call(r,l)&&r[l]&&m.push(r[l][0]),r[l]=0;for(t in i)Object.prototype.hasOwnProperty.call(i,t)&&(e[t]=i[t]);for(d&&d(n);m.length;)m.shift()();return o.push.apply(o,c||[]),a()}function a(){for(var e,n=0;n<o.length;n++){for(var a=o[n],t=!0,s=1;s<a.length;s++){var i=a[s];0!==r[i]&&(t=!1)}t&&(o.splice(n--,1),e=l(l.s=a[0]))}return e}var t={},r={0:0},o=[];function l(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,l),a.l=!0,a.exports}l.m=e,l.c=t,l.d=function(e,n,a){l.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:a})},l.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.t=function(e,n){if(1&n&&(e=l(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(l.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var t in e)l.d(a,t,function(n){return e[n]}.bind(null,t));return a},l.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(n,"a",n),n},l.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},l.p="";var s=window.webpackJsonp=window.webpackJsonp||[],i=s.push.bind(s);s.push=n,s=s.slice();for(var c=0;c<s.length;c++)n(s[c]);var d=i;o.push([19,1]),a()}({14:function(e,n,a){var t=a(6),r=a(15);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};t(r,o);e.exports=r.locals||{}},15:function(e,n,a){(n=a(7)(!1)).push([e.i,".gameUrlLink{\r\n    width: 400px;\r\n    font-size: 0.8rem;\r\n    border:0px;\r\n}\r\n.gameUrlLinkButton{\r\n    font-size: 0.8rem;\r\n}",""]),e.exports=n},19:function(e,n,a){"use strict";a.r(n);var t=a(0),r=a.n(t);a(11),a(12),a(14);var o=a(3);a(16);function l(){return o.database()}o.initializeApp({apiKey:"AIzaSyC45XgJXxNHEJPzFQb6KISJ86oCtCtIQoA",authDomain:"codenames-app.firebaseapp.com",databaseURL:"https://codenames-app.firebaseio.com",projectId:"codenames-app",storageBucket:"codenames-app.appspot.com",messagingSenderId:"774207860665",appId:"1:774207860665:web:ef532560504c591162d068"});const s=l();async function i(e){await p(e),s.ref("games").child(e).on("value",async n=>{if(n.exists()){await r()("#body").html(),r()("#body").html('\n    <div class="row">\n        <div class="col" id="gameProps"></div>\n    </div>\n    <div class="row">\n        <div class="col-4 col-sm-3 col-md-2 col-lg-2 col-xl-2">\n            <h6>Игроки:</h6>\n            <ul class="list-group" id="playerList"></ul>\n        </div>\n        <div class="col" id="gameField"></div>\n    </div>\n    '),r()("#gameField").html(function(e){const n=JSON.parse(localStorage.getItem("userId")),a=e.val();let t="";const r=["warning","primary","danger","dark","light"],o=["outline-warning","outline-primary","outline-danger","outline-dark","light"];for(const e in a.words){let l=r[4],s=r[4];a.words[e].isOpen?(l=r[a.words[e].changeColor],s=r[a.words[e].color]):l=r[4],a.players[n.id].isCaptain&&(l=a.words[e].isOpen?r[a.words[e].changeColor]:o[a.words[e].color]),t+=`\n            <span class="btn btn-${l} m-2 col-xl-2 col-lg-2 col-md-4 col-sm-4 game-words" ${a.players[n.id].isCaptain?"wordId="+e:""} >\n                    \n                ${a.words[e].changeColor!=a.words[e].color&&a.words[e].isOpen?'<span class="btn-'+s+'">!!!</span>':""}\n\n                ${a.words[e].text}\n                \n                ${a.players[n.id].isCaptain?'<button class="btn btn-sm dropdown-toggle" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>':""}\n                ${a.players[n.id].isCaptain?d(e,a.words[e].isOpen,a.words[e].changeColor):""}\n            </span>\n        `}return t}(n)),r()("#playerList").html(function(e){const n=JSON.parse(localStorage.getItem("userId")),a=e.val();let t="";const r=["warning","primary","danger","dark","light"];for(const e in a.players){let o=a.players[e].team;t+=`\n        <li class="list-group-item list-group-item-${r[o]} ${a.players[e].isCaptain?"font-weight-bold":""}" playerId="${e}">\n        ${n.id==a.creater?'<button class="btn btn-sm dropdown-toggle" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>':""}\n        ${n.id==a.creater?c(e,a.players[e].isCaptain):""}\n        ${a.players[e].name}\n        ${e==n.id?"<small>(вы)</small>":""}\n        </li>\n        `}return t}(n)),r()("#gameProps").html(function(e){return`\n    <div class="row">\n    <b>ВСЕГО</b>&nbsp;слов:&nbsp;<span class="list-group-item-primary m-x-1">${1==e.val().firstTurn?"9":"8"}</span> / <span class="list-group-item-danger m-x-1">${2==e.val().firstTurn?"9":"8"}</span>&nbsp;\n    Первыми ходят&nbsp;${1==e.val().firstTurn?'<span class="list-group-item-primary  m-x-1">синяя</span>':'<span class="list-group-item-danger m-x-1">красная</span>'}&nbsp;команда </div>\n    `}(n));const a=JSON.parse(localStorage.getItem("userId"));a.id==n.val().creater&&r()(".captainFlag").change((async function(){if(this.checked){let e=confirm("Are you sure?");r()(this).prop("checked",e)}let n=s.ref("games").child(e).child("players").child(this.id.substr(3));await n.child("isCaptain").set(this.checked)})),n.val().players[a.id].isCaptain&&(r()(".isOpenWordFlag").change((async function(){if(this.checked){let e=confirm("Are you sure?");r()(this).prop("checked",e)}let n=s.ref("games").child(e).child("words").child(this.id.substr(3));await n.child("isOpen").set(this.checked)})),r()("input[type=radio]").change((async function(){let n=s.ref("games").child(e).child("words").child(this.name.substr(3));await n.child("changeColor").set(this.value)})))}else r()("#body").html("<h1>Ошибка! 404</h1>")})}function c(e,n){return`\n    <div class="dropdown-menu p-1" aria-labelledby="dropdownMenuLink">\n            <div class="form-check">\n                <label  class="form-check-label">\n                    <input type="checkbox" class="form-check-input captainFlag" id="cb_${e}" ${n?"checked":""} >Капитан\n                </label>\n            </div>\n        </div>\n    `}function d(e,n,a){return`\n    <div class="dropdown-menu p-1" aria-labelledby="dropdownMenuLink">\n            <div class="form-check">\n                <label  class="form-check-label">\n                    <input type="checkbox" class="form-check-input isOpenWordFlag" id="cb_${e}" ${n?"checked":""} >Показать слово\n                </label>\n            </div>\n\n            <div class="dropdown-divider"></div>\n            \n            <div class="form-check">\n                <input class="form-check-input" type="radio" name="rb_${e}" id="rb_0_${e}" value="0" ${0==a?"checked":""}>\n                <label class="form-check-label" for="rb_0_${e}">\n                <span class="text-warning">нейтральный</span>\n                </label>\n            </div>\n            \n            <div class="form-check">\n                <input class="form-check-input" type="radio" name="rb_${e}" id="rb_1_${e}" value="1" ${1==a?"checked":""}>\n                <label class="form-check-label" for="rb_1_${e}">\n                <span class="text-primary">синий</span>\n                </label>\n            </div>\n            \n            <div class="form-check">\n                <input class="form-check-input" type="radio" name="rb_${e}" id="rb_2_${e}" value="2" ${2==a?"checked":""}>\n                <label class="form-check-label" for="rb_2_${e}">\n                <span class="text-danger">красный</span>\n                </label>\n            </div>\n        </div>\n    `}async function p(e){let n=JSON.parse(localStorage.getItem("userId")),a=s.ref("games").child(e).child("players").child(n.id);return await a.child("name").set(n.name),await a.child("team").set(n.team),!0}async function m(){let e=await JSON.parse(localStorage.getItem("userId")),n=e.name,a=["","checked",""];a=1==e.team?["","checked",""]:["","","checked"];const t=(o="Представьтесь",l=`\n    <div class="form-group">\n        <label for="playerName">Имя</label>\n        <input type="text" class="form-control" id="userName" value="${n}">\n    </div>\n    <div class="form-check">\n        <input class="form-check-input" type="radio" name="team" id="team_red" value="1" ${a[1]}>\n        <label class="form-check-label" for="team_red">\n            За синих\n        </label>\n    </div>\n    <div class="form-check">\n        <input class="form-check-input" type="radio" name="team" id="team_blue" value="2" ${a[2]}>\n        <label class="form-check-label" for="team_blue">\n            За красных\n        </label>\n    </div>\n    `,`<div class="modal fade" id="modal" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdropLabel" aria-hidden="true">\n        <div class="modal-dialog" role="document">\n        <div class="modal-content">\n            <form id="myForm">\n                <div class="modal-header">\n                    <h5 class="modal-title" id="staticBackdropLabel">${o}</h5>\n                </div>\n                <div class="modal-body">\n                    ${l}\n                </div>\n                <div class="modal-footer">\n                    ${'\n    <button type="submit" class="btn btn-primary" id="savePlayerName">Сохранить</button>\n    '}\n                </div>\n            </form>\n        </div>\n        </div>\n    </div>\n    `);var o,l;r()("body").append(t),r()("#modal").modal("show"),r()("#myForm").on("submit",n=>{n.preventDefault(),async function(e){if(r()("#userName").val().length<3)r()("#modal").click();else{const n=r()("#userName").val().trim(),a=r()("input[type=radio][name=team]:checked").val();localStorage.setItem("userId",JSON.stringify({id:e.id,name:n,team:a})),r()("#changeName").html(r()("#userName").val().trim()),r()("#changeName").removeClass("btn-primary btn-outline-danger"),r()("#changeName").addClass(1==a?"btn-outline-primary":"btn-outline-danger"),r()("#modal").modal("hide").remove(),r()(".modal-backdrop").remove()}if(null!=window.location.hash){p(window.location.hash.substr(1))}}(e)})}const u=l();const h=l();async function f(){const e=await async function(e=!1){let n={};await h.ref("words").once("value").then(e=>{n=e.val()});const a=b(n,25),t=[b([1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3]),b([2,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3])],r=Math.floor(2*Math.random()),o={firstTurn:0,words:{}};o.firstTurn=r+1;for(let e=0;e<25;e++)o.words[e]=new Object({text:a[e],isOpen:!1,color:t[r][e],changeColor:t[r][e]});return o}(),n=JSON.parse(localStorage.getItem("userId")),a={date:(new Date).toJSON(),creater:n.id,isActive:!0,firstTurn:e.firstTurn,players:{[n.id]:{name:n.name,team:0,isCaptain:!1}},words:e.words};let t=h.ref("games").push().key;h.ref("games").child(t).set(a),window.location.hash="#"+t}function b(e,n=0){for(let n=e.length-1;n>0;n--){const a=Math.floor(Math.random()*(n+1));[e[n],e[a]]=[e[a],e[n]]}return n>0&&(e=e.slice(0,n)),e}localStorage.getItem("userId")||localStorage.setItem("userId",JSON.stringify({id:function(e){for(var n="";n.length<e;)n+=Math.random().toString(36).substring(2);return n.substring(0,e)}(32),name:"Anonymous",team:1}));let g=JSON.parse(localStorage.getItem("userId"));function v(){let e=window.location.hash.substr(1);r()("#gameLink").html('\n        <div class="col">\n            Ссылка на эту игру: <input type="text" id="gameURL" class="gameUrlLink"><button type="button" class="gameUrlLinkButton" id="copyLink">скопировать</button>\n        </div>\n    '),r()("#gameURL").val(window.location.href),r()("#copyLink").click(y),"newGame"==e?f():i(e)}function y(){var e=document.getElementById("gameURL");e.select(),e.setSelectionRange(0,99999),document.execCommand("copy")}"Anonymous"==g.name&&m(),window.addEventListener("storage",()=>{let e=JSON.parse(localStorage.getItem("userId"));r()("#changeName").html(e.name).removeClass("btn-outline-primary btn-outline-danger").addClass(1==e.team?"btn-outline-primary":"btn-outline-danger")}),r()("#changeName").on("click",()=>{m()}),r()("#changeName").html(g.name).removeClass("btn-outline-primary btn-outline-danger").addClass(1==g.team?"btn-outline-primary":"btn-outline-danger"),window.addEventListener("hashchange",()=>{window.location.hash&&v()}),window.location.hash?v():u.ref("games").limitToLast(10).on("value",e=>{!function(e){const n=function(e){let n={},a=[];for(let n in e)a.push(n);for(let t=a.length-1;t>=0;t--){let r=e[a[t]];n[a[t]]=r}return n}(e);let a='\n    <div class="row">\n        <div class="col m-4">\n    <a class="btn btn-primary" href="./#newGame">Создать новую игру</a>\n    </div>\n    </div>\n    <div class="row">\n    <div class="col">';for(let e in n)a+=`<li>\n            <a href="/#${e}">${n[e].date}</a>\n        </li>\n        `;a+="</div></div>",r()("#body").html(a)}(e.val())})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,